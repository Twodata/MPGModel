shiny::runApp()
runApp()
library(dplyr)
data(mtcars)
mtcars <- mtcars %>% select(mpg, disp, hp, wt)
mtcars
runApp()
model <- lm(mpg ~., mtcars)
model
runApp()
runApp()
?wellPanel
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
library(shiny)
ui <- fluidPage(
headerPanel(wellPanel('MPG Prediction Model')),
sidebarLayout(
sidebarPanel(
fluidRow(column(12, h2('Input Data'))),
numericInput('disp', 'Enter displacement value', min = 70.0, max = 500.0, value = 0),
numericInput('hp', 'Enter horsepower value', min = 50, max = 400, value = 0 ),
numericInput('wt', 'Enter weight value', min = 1.600, max = 6.000, value = 0),
submitButton('Submit values')
),
mainPanel(wellPanel(fluidRow(column(12, h1('MPG Value', align = 'center')))),
hr(),
br(),
wellPanel(fluidRow(h1(column(4, tableOutput('pred'), offset = 4)))
)
)))
server <- function(input, output){
output$pred <- renderPrint({
library(stats)
cat(round(predict(model, data.frame(disp = input$disp, hp = input$hp, wt = input$wt)), 2))
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
headerPanel(wellPanel('MPG Prediction Model')),
sidebarLayout(
sidebarPanel(
fluidRow(column(12, h2('Input Data'))),
numericInput('disp', 'Enter displacement value', min = 70.0, max = 500.0, value = 0),
numericInput('hp', 'Enter horsepower value', min = 50, max = 400, value = 0 ),
numericInput('wt', 'Enter weight value', min = 1.600, max = 6.000, value = 0),
submitButton('Submit values')
),
mainPanel(wellPanel(fluidRow(column(12, h1('MPG Value', align = 'center')))),
hr(),
br(),
wellPanel(fluidRow(h1(column(4, tableOutput('pred'), offset = 4)))
)
)))
server <- function(input, output){
output$pred <- renderPrint({
library(stats)
cat(round(predict(model, data.frame(disp = input$disp, hp = input$hp, wt = input$wt)), 2))
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
headerPanel(wellPanel('MPG Prediction Model')),
sidebarLayout(
sidebarPanel(
fluidRow(column(12, h2('Input Data'))),
numericInput('disp', 'Enter displacement value', min = 70.0, max = 500.0, value = 0),
numericInput('hp', 'Enter horsepower value', min = 50, max = 400, value = 0 ),
numericInput('wt', 'Enter weight value', min = 1.600, max = 6.000, value = 0),
submitButton('Submit values')
),
mainPanel(wellPanel(fluidRow(column(12, h1('MPG Value', align = 'center')))),
hr(),
br(),
wellPanel(fluidRow(h1(column(4, tableOutput('pred'), offset = 4)))
)
)))
server <- function(input, output){
output$pred <- renderPrint({
library(stats)
cat(round(predict(model, data.frame(disp = input$disp, hp = input$hp, wt = input$wt)), 2))
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
headerPanel(wellPanel('MPG Prediction Model')),
sidebarLayout(
sidebarPanel(
fluidRow(column(12, h2('Input Data'))),
numericInput('disp', 'Enter displacement value', min = 70.0, max = 500.0, value = 0),
numericInput('hp', 'Enter horsepower value', min = 50, max = 400, value = 0 ),
numericInput('wt', 'Enter weight value', min = 1.600, max = 6.000, value = 0),
submitButton('Submit values')
),
mainPanel(wellPanel(fluidRow(column(12, h1('MPG Value', align = 'center')))),
hr(),
br(),
wellPanel(fluidRow(h1(column(4, tableOutput('pred'), offset = 4)))
)
)))
server <- function(input, output){
output$pred <- renderPrint({
library(stats)
cat(round(predict(model, data.frame(disp = input$disp, hp = input$hp, wt = input$wt)), 2))
})
}
library(shiny)
data(mtcars)
library(stats)
ui <- fluidPage(
headerPanel(wellPanel('MPG Prediction Model')),
sidebarLayout(
sidebarPanel(
fluidRow(column(12, h2('Input Data'))),
numericInput('disp', 'Enter displacement value', min = 70.0, max = 500.0, value = 0),
numericInput('hp', 'Enter horsepower value', min = 50, max = 400, value = 0 ),
numericInput('wt', 'Enter weight value', min = 1.600, max = 6.000, value = 0),
submitButton('Submit values')
),
mainPanel(wellPanel(fluidRow(column(12, h1('MPG Value', align = 'center')))),
hr(),
br(),
wellPanel(fluidRow(h1(column(4, tableOutput('pred'), offset = 4)))
)
)))
server <- function(input, output){
output$pred <- renderPrint({
library(stats)
cat(round(predict(model, data.frame(disp = input$disp, hp = input$hp, wt = input$wt)), 2))
})
}
shinyApp(ui = ui, server = server)
getwd()
shiny::runApp()
runApp()
shiny::runApp()
mtcars
runApp()
runApp()
mtcars
runApp()
runApp()
runApp()
getwd()
shiny::runApp()
mtcars
library(dplyr)
filter(mtcars, cyl == 8)
filter(mtcars, cyl == 6)
filter(mtcars, cyl == 4)
shiny::runApp()
runApp()
